// Mixins
// --------------------------------------------------
@mixin clearfix() {
  &::before,
  &::after {
    display: table;
    content: " ";
  }
  &::after {
    clear: both;
  }
}

@mixin make-grid-columns($i: 1, $list: ".grid__col-#{$i}, .grid__sd-col-#{$i}, .grid__l-col-#{$i}, .grid__t-col-#{$i}, .grid__p-col-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .grid__col-#{$i}, .grid__sd-col-#{$i}, .grid__l-col-#{$i}, .grid__t-col-#{$i}, .grid__p-col-#{$i}";
  }
  #{$list} {
    position: relative;
    box-sizing: border-box;
    min-height: 1px;
    padding-right: floor($gutter-width / 2);
    padding-left:  ceil($gutter-width / 2);
  }
}


@mixin float-grid-columns($class, $i: 1, $list: "") {
  @if ($class == "") {
    $list: "#{$list}, .grid__col-#{$i}";
  } @else {
    $list: "#{$list}, .grid__#{$class}-col-#{$i}";
  }
  @for $i from (1 + 1) through $grid-columns {
    @if ($class == "") {
      $list: "#{$list}, .grid__col-#{$i}";
    } @else {
      $list: "#{$list}, .grid__#{$class}-col-#{$i}";
    }
  }
  #{$list} {
    float: left;
  }
}


@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    @if ($class == "") {
      .grid__col-#{$index} {
        width: percentage(($index / $grid-columns));
      }
    } @else {
      .grid__#{$class}-col-#{$index} {
        width: percentage(($index / $grid-columns));
      }
    }
  } @else if ($type == push) {
    @if ($index == 0){
      @if ($class == ""){
        .grid__col-push-0 {
          left: auto;
        }
      } @else {
        .grid__#{$class}-col-push-0 {
          left: auto;
        }
      }
    } @else {
      @if ($class == "") {
        .grid__col-push-#{$index}{
          left: ($index / $grid-columns) * 100%;
        }
      } @else {
        .grid__#{$class}-col-push-#{$index}{
          left: ($index / $grid-columns) * 100%;
        }
      }
    }
  } @else if ($type == pull) {
    @if ($index == 0){
      @if ($class == "") {
        .grid__col-pull-0 {
          right: auto;
        }
      } @else {
        .grid__#{$class}-col-pull-0 {
          right: auto;
        }
      }
    } @else {
      @if ($class == "") {
        .grid__col-pull-#{$index}{
          right: ($index / $grid-columns) * 100%;
        }
      } @else {
        .grid__#{$class}-col-pull-#{$index}{
          right: ($index / $grid-columns) * 100%;
        }
      }
    }
  } @else if ($type == offset) {
    @if ($class == "") {
      .grid__col-offset-#{$index} {
        margin-left: percentage(($index / $grid-columns));
      }
    } @else {
      .grid__#{$class}-col-offset-#{$index} {
        margin-left: percentage(($index / $grid-columns));
      }
    }
  }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}


// Create grid for specific class
@mixin make-grid($class) {
  @include float-grid-columns($class);
  @include loop-grid-columns($grid-columns, $class, width);
  @include loop-grid-columns($grid-columns, $class, pull);
  @include loop-grid-columns($grid-columns, $class, push);
  @include loop-grid-columns($grid-columns, $class, offset);
}


// Centered container element
@mixin container-fixed($gutter: $gutter-width) {
  margin-right: auto;
  margin-left: auto;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
  @include clearfix;
}

// Creates a wrapper for a series of columns
@mixin make-row() {
  margin-left: ceil($gutter-width / -2);
  margin-right: floor($gutter-width / -2);
  @include clearfix;
}

@mixin placeholder($color: $gray-dark) {
  color: $color;
  opacity: 1;
}

@mixin button-variant($color, $background, $border) {
  color: $color;
  background-color: $background;
  border-color: $border;

  &:focus,
  &.focus {
    color: $color;
    background-color: darken($background, 10%);
    border-color: darken($border, 25%);
  }
  &:hover {
    color: $color;
    background-color: darken($background, 10%);
    border-color: darken($border, 12%);
  }
  &:active,
  &.active,
  .open > &.dropdown-toggle {
    color: $color;
    background-color: darken($background, 10%);
    border-color: darken($border, 12%);

    &:hover,
    &:focus,
    &.focus {
      color: $color;
      background-color: darken($background, 17%);
      border-color: darken($border, 25%);
    }
  }
  &:active,
  &.active,
  .open > &.dropdown-toggle {
    background-image: none;
  }
  &.disabled {
    &,
    &:hover,
    &:focus,
    &.focus,
    &:active,
    &.active {
      background-color: $background;
      border-color: $border;
    }
  }

  .badge {
    color: $background;
    background-color: $color;
  }
}

@mixin border-top-radius($radius) {
  border-top-right-radius: $radius;
  border-top-left-radius: $radius;
}
@mixin border-right-radius($radius) {
  border-bottom-right-radius: $radius;
  border-top-right-radius: $radius;
}
@mixin border-bottom-radius($radius) {
  border-bottom-right-radius: $radius;
  border-bottom-left-radius: $radius;
}
@mixin border-left-radius($radius) {
  border-bottom-left-radius: $radius;
  border-top-left-radius: $radius;
}

@mixin user-select($select) {
  user-select: $select;
}

// Button sizes
@mixin button-size($padding-vertical, $padding-horizontal, $font-size, $line-height) {
  padding: $padding-vertical $padding-horizontal;
  font-size: $font-size;
  line-height: $line-height;
}

@mixin img-responsive($display: block) {
  display: $display;
  max-width: 100%; // Part 1: Set a maximum relative to the parent
  height: auto; // Part 2: Scale the height according to the width, otherwise you get stretching
}

@mixin img-retina($file, $type, $width, $height) {
  background-image: url($file + "." + $type);
  @media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx) {
    background-image: url($file + "@2x." + $type);
    background-size: $width $height;
  }
}

@mixin navbar-vertical-align($element-height) {
  margin-top: (($navbar-height - $element-height) / 2);
  margin-bottom: (($navbar-height - $element-height) / 2);
}

// Responsive utilities
// [converter] $parent hack
@mixin responsive-visibility($parent) {
  #{$parent} {
    display: block !important;
  }
  table#{$parent} {
    display: table !important;
  }
  tr#{$parent} {
    display: table-row !important;
  }
  th#{$parent}, td#{$parent} {
    display: table-cell !important;
  }
}

// [converter] $parent hack
@mixin responsive-invisibility($parent) {
  #{$parent} {
    display: none !important;
  }
}

@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite, $extra-offset-x: 0, $extra-offset-y: 0) {
  $sprite-offset-x: nth($sprite, 3) + $extra-offset-x;
  $sprite-offset-y: nth($sprite, 4) + $extra-offset-y;
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

//Retina

// @mixin sprite-2x($sprite){
//   @include sprite-width($sprite);
//   @include sprite-height($sprite);
//   @include sprite-image($sprite);
//   @include sprite-position($sprite);
//   @media (min--moz-device-pixel-ratio: 1.3),
//     (-o-min-device-pixel-ratio: 2.6/2),
//     (-webkit-min-device-pixel-ratio: 1.3),
//     (min-device-pixel-ratio: 1.3),
//     (min-resolution: 1.3dppx) {
//     background-image: url($sprites-2x-image);
//     background-size: $sprites-2x-width/2 $sprites-2x-height/2;
//   }
// }

// // Set retina background-image only
// // Once this is set you can use the position, height & width mixins individually with 1x values
// // (e.g. if you only want to set a new background-position on hover, don't need to re-set background-image)
// @mixin sprite-2x-image($sprite1x, $sprite2x){
//   @include sprite-image($sprite1x);

//   @media (min--moz-device-pixel-ratio: 1.3),
//     (-o-min-device-pixel-ratio: 2.6/2),
//     (-webkit-min-device-pixel-ratio: 1.3),
//     (min-device-pixel-ratio: 1.3),
//     (min-resolution: 1.3dppx) {
//     @include sprite-image($sprite2x);
//     background-size: nth($sprite1x, 7) nth($sprite1x, 8);
//   }
// }

// $ieSpriteSvg: '.lt-ie9' !default;
// $spriteSvg: map-get($icons, sprite) !default;

// @function mq-px2em($px, $base-font-size: $mq-base-font-size) {
//   @if unitless($px) {
//     @warn "Assuming #{$px} to be in pixels, attempting to convert it into pixels.";
//     @return mq-px2em($px * 1px, $base-font-size);
//   } @else if unit($px) == em {
//     @return $px;
//   }
//   @return ($px / $base-font-size) * 1em;
// }

// @function sprite-attr($icon, $attr) {
//   $newIcon: map-get($icons, $icon);
//   @if $newIcon == null {
//     @warn "Can't find an icon with the name #{$icon}";
//   }
//   @return map-get($newIcon, $attr);
// }

// @function icon-attr($icon) {
//   $attr: (
//     width: sprite-attr($icon, width),
//     height: sprite-attr($icon, height),
//     x: sprite-attr($icon, backgroundX),
//     y: sprite-attr($icon, backgroundY)
//   );

//   @return $attr;
// }

// @function icon_width($icon) {
// 	@return mq-px2em(sprite-attr($icon, width));
// }

// @function icon_height($icon) {
// 	@return mq-px2em(sprite-attr($icon, height));
// }

// %sprite-svg {
//   display: inline-block;
//   background-image: url(map-get($spriteSvg, svgPath));
//   background-size: mq-px2em(map-get($spriteSvg, width)) mq-px2em(map-get($spriteSvg, height));
// }
// %ie-sprite-svg {
//   background-image: url(map-get($spriteSvg, pngPath));
// }

// @mixin ie-sprite-svg($icon, $type: all) {
// 	$iconMap: icon-attr($icon);

// 	@if $ieSpriteSvg {
// 		#{$ieSpriteSvg} & {
// 			@if $type == all {
// 				// Shares the PNG background
// 				@extend %ie-sprite-svg;
// 			}
// 			// Outputs dimensions of icon
// 			@if $type == all or $type == size {
// 				width: map-get($iconMap, width);
// 				height: map-get($iconMap, height);
// 			}
// 			// Outputs background position
// 			@if $type == all or $type == bg {
// 				background-position: (map-get($iconMap, x) - 5) (map-get($iconMap, y) - 5);
// 			}
// 		}
// 	}
// }

// @mixin sprite-svg($icon, $type: all) {
//   @if $type == all {
//     // Shares the backgrounds
//     @extend %sprite-svg;
//   }

//   $iconMap: icon-attr($icon);

//   // Вывод размеров в em
//   @if $type == all or $type == size {
//     width: mq-px2em(map-get($iconMap, width) + 1);
//     height: mq-px2em(map-get($iconMap, height) + 1);
//   }

//   // Вывод положения фона в em
//   @if $type == all or $type == bg {
//     background-position: mq-px2em(map-get($iconMap, x) - 5) mq-px2em(map-get($iconMap, y) - 5);
//   }

//   // Добавление ie резерва
//   @include ie-sprite-svg($icon, $type);

// }
